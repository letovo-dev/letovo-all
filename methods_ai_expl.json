{
    "explanation:": {
        "request": {
            "function": "technical field, just for backend",
            "method": "allowed REST API method",
            "body_fields": "required fields in request body",
            "header_fields": "required fields in request header"
        },
        "response": {
            "status_code": "response status code",
            "headers": "response headers",
            "text": "response text",
            "body": "response body, only first 2 results"
        }
    },
    "/auth/login": {
        "request": {
            "function": "enable_auth",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String"
            }
        },
        "response": {},
        "explanation": "This method is enabling authentication by processing a POST request. It expects two fields in the request body: 'login' as a string for username information and 'password' also as a string for password information. The response of this operation is not specified, which might indicate that no specific output or status message is given back after successful authentication setup."
    },
    "/auth/reg": {
        "request": {
            "function": "enable_reg",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String",
                "temp_token": "String"
            }
        },
        "response": {},
        "explanation": "This method enables registration. When a POST request is sent with login, password, and temp_token in the body, it allows for new user registration."
    },
    "/auth/amiauthed": {
        "request": {
            "function": "am_i_authed",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user is authenticated by using an API endpoint with a specific request format that includes a \"Bearer\" header. It returns a status indicating whether authentication was successful (with 't' status) and provides additional server-related headers for context."
    },
    "/auth/amiadmin": {
        "request": {
            "function": "am_i_admin",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if the user making a GET request has administrative privileges. It includes an authorization token in the header for authentication. If the user is indeed an admin, it returns a status indicating true (200 OK with 't' in the body). The response also contains standard headers like Server, Date, Content-Type, and others that are typical for HTTP responses."
    },
    "/auth/isactive/:username(.*)": {
        "request": {
            "function": "is_user_active",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user with a specific username is active. It sends a GET request to retrieve this information and returns a status code of 200 along with the data confirming the user's activity status as 't'. The response also includes standard headers for server, date, content type, length, and connection details."
    },
    "/auth/isuser/:username(.*)": {
        "request": {
            "function": "is_user",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a specific user exists. When requested with a username (through the URL path '/auth/isuser/{username}'), it uses a 'get' HTTP request to determine if that user exists in the system. If the user does exist, it returns a status code of 200 along with confirmation ('t') as part of the response body. Other details like server information and content type are also included in the headers for additional context about the response."
    },
    "/auth/delete": {
        "request": {
            "function": "enable_delete",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method `enable_delete` allows a DELETE request by verifying a specific header field called 'Bearer'. If this field is present in the request, the operation proceeds. Otherwise, it does not proceed. Essentially, it's a simple authorization check for delete operations."
    },
    "/auth/add_userrights": {
        "request": {
            "function": "add_userrights",
            "method": "put",
            "body_fields": {
                "username": "String",
                "rights": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The `add_userrights` method allows you to add certain permissions or \"rights\" to a specific user identified by their username. It utilizes the HTTP PUT request for this action. The process requires two parameters: 'username', which identifies the user, and 'rights', specifying what kind of access or privileges should be granted to that user. To authenticate this operation, it uses a 'Bearer' token in headers."
    },
    "/auth/change_username": {
        "request": {
            "function": "change_username",
            "method": "put",
            "body_fields": {
                "new_username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows a user to change their username by sending a PUT request with the new desired username as part of the body. The request needs to include an authentication token in the header for authorization."
    },
    "/auth/change_password": {
        "request": {
            "function": "change_password",
            "method": "put",
            "body_fields": {
                "unlogin": "Bool",
                "new_password": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The `/auth/change_password` method allows a user to change their password using a PUT request. It requires two fields: `new_password` which is the new password they want to set, and `unlogin`, a boolean flag that indicates if they are currently unauthenticated. The request must also include an authentication token in the header with the \"Bearer\" keyword."
    },
    "/auth/register_true": {
        "request": {
            "function": "register_true",
            "method": "put",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The provided documentation describes a web API endpoint designed for user registration. Specifically:\n\n- The endpoint is identified by the path `/auth/register_true` which implies that this route is part of an authentication service (likely dealing with logins and registrations).\n\n- The method `put` signifies that clients should use this HTTP PUT method to interact with this specific endpoint.\n\n- The 'header_fields' contain a key 'Bearer', implying that for making requests via this endpoint, users need to provide an authorization token prefixed with 'Bearer '. Typically, such tokens are obtained through a login process where user credentials are validated and then a secure token is issued.\n\nIn summary: This API method allows for the registration of new users by accepting POST requests from clients. The client must include an authentication 'Bearer' token in the headers to prove their authorization before the registration operation can be performed."
    },
    "/auth/isadmin/:username(.*)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a given username has administrative privileges. If the user is an admin, it returns a 200 status code with a 't' in the body indicating success. The response also includes standard HTTP headers for server information and content details."
    },
    "/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_1.png",
                        "active": "t",
                        "times_visited": "1",
                        "departmentid": "0",
                        "rolename": "\u043f\u0438\u043f\u0430",
                        "registered": "t"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet describes a route handling function for retrieving user information. Specifically:\n\n- It matches URLs containing `/user/` followed by a username that includes only letters, numbers, or dashes.\n- The function called on this route is `user_info`.\n- When accessed via GET request, it returns:\n  - HTTP Status Code: 200 (Success)\n  - Body with user details such as UserID, UserName, user rights etc., for example:\n    - UserID: '1762'\n    - Username: 'scv-7'\n    - UserRights: 'admin'\n  - Additional details like the time of joining, avatar picture path, activity status, number of visits, department ID and role name.\n- Headers provided are basic server details such as Server type, date of request processing, content type and length.\n\nIn summary, this route allows fetching specific user information by username via a GET method to `user_info` function."
    },
    "/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "balance": "262",
                        "registered": "t",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_1.png",
                        "active": "t",
                        "times_visited": "1",
                        "role": "\u043f\u0438\u043f\u0430",
                        "paycheck": "1000",
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves detailed information about a user specified by their username. It returns data such as UserID, username, rights, balance, registration date, avatar picture, activity status, visit count, role, paycheck, department ID, and department name. The response includes the status code 200 indicating success, along with relevant headers for server communication."
    },
    "/user/roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100",
                        "departmentname": "somewhere"
                    },
                    {
                        "username": "scv-7",
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet describes a function named \"user_roles\" which handles GET requests. It retrieves information about user roles including username, role ID, role name, ranking, department ID, payment amount, and department name for the specified 'username'. The response includes status code 200 indicating success along with various headers providing metadata like server type, date of request, content type etc."
    },
    "/user/unactive_roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_unactive_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "0",
                        "rolename": "somewhere",
                        "rang": "0",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method `user_unactive_roles` retrieves information about inactive roles associated with a specific username. It takes the username as input, likely from a URL path, and returns details of any inactive roles linked to that user. These details include role ID, name, rank, department ID, payment info, and department name. The response is structured in JSON format with status code 200 indicating success."
    },
    "/user/add_role": {
        "request": {
            "function": "add_user_role",
            "method": "post",
            "body_fields": {
                "username": "String",
                "role_id": "Int",
                "role": "String",
                "department": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method adds a role to a user. It requires the username of the user, the ID of the role, a string representation of the role, and an optional department ID as inputs through a POST request with a Bearer token in the header. The operation essentially assigns a specific role to the given user."
    },
    "/user/delete_role": {
        "request": {
            "function": "delete_user_role",
            "method": "delete"
        },
        "response": {},
        "explanation": "The method is deleting a role for a user."
    },
    "/user/create_role": {
        "request": {
            "function": "create_role",
            "method": "post",
            "body_fields": {
                "payment": "Int",
                "role": "String",
                "department": "Int",
                "rang": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to create a new role. It requires three pieces of information: payment details, role name, department ID, and rank level. Additionally, it necessitates a 'Bearer' token in the header for authentication. Upon execution, the method will generate a new role based on the provided parameters."
    },
    "/user/department/roles/:department([0-9]+)": {
        "request": {
            "function": "department_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "11",
                        "rolename": "starter",
                        "rang": "0",
                        "departmentid": "1",
                        "payment": "-10"
                    },
                    {
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet represents a function designed to retrieve roles associated with a specific department. When invoked, it accepts the ID of a department as input parameter, then responds with details about the roles within that department in the form of an HTTP response typically containing status code 200 indicating success, along with JSON body data and standard headers such as server name, date, content type, length, and connection settings."
    },
    "/user/department/name/:department([0-9]+)": {
        "request": {
            "function": "department_name",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "department": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The given method retrieves information about a specific department by its ID. It performs a GET request to obtain details of the department represented by the parameter `:department([0-9]+)`, which stands for an integer value indicating the department's identifier. The response includes a status code, body with the retrieved department name ('somewhere'), and various headers like Server, Date, Content-Type, etc. Essentially, it fetches data about a specific department based on its ID."
    },
    "/user/set_department": {
        "request": {
            "function": "set_users_department",
            "method": "put",
            "body_fields": {
                "department": "String",
                "username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to change the department of a user by providing their username and the new department name. It uses HTTP's PUT method for updating data, requiring an authentication token in the header (Bearer type). The essential fields needed are the 'department' which specifies the new department for the user, and 'username', identifying the specific user whose department needs to be updated."
    },
    "/user/department/roles": {
        "request": {
            "function": "all_departments",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "departmentid": "1",
                        "departmentname": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about all departments. It uses a GET request to obtain data on departments from a server, returning details like department ID and name in a JSON response."
    },
    "/user/department/start/:department(.*)": {
        "request": {
            "function": "starter_role",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "text": "11",
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method appears to retrieve department-related roles. When invoked via a GET request using the specified URL path, it returns a status code of 200 along with some headers and the text '11', which seems to represent the role data for the department in question."
    },
    "/user/all_avatars": {
        "request": {
            "function": "all_avatars",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/avatars/example_1.png",
                    "images/avatars/example_5.png"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of all available avatars by making a GET request. It returns the names of the avatar images in a JSON response."
    },
    "/user/set_avatar": {
        "request": {
            "method": "put",
            "body_fields": {
                "avatar": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to change your profile picture (avatar) by sending a PUT request with the new avatar string in the body. The request must include an authentication token in the headers prefixed with \"Bearer \"."
    },
    "/media/get/:filename(.*)": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet describes a route configuration in an application server (likely written in Node.js using Express framework). \n\nThe route is '/media/get/:filename(.*)'. This means any request that hits this endpoint must start with \"/media/get/\" and include a filename following that path. The `:filename` part signifies that the system will match whatever comes after \"get/\" as the actual file name.\n\nWhat happens when someone makes a GET request to this endpoint is defined in the 'request' section:\n1) **Method**: The HTTP method being used here is GET, which means data is requested from the server.\n2) **Header Fields**: It requests for content using an `Authorization` header that includes the keyword \"Bearer\". This suggests that the user or client making the request needs to be authenticated and provide a bearer token (which could be a JWT or other type of token).\n\nThe 'response' section is empty, meaning there's no specified response format, which implies that the server should return whatever file was requested by the user. \n\nIn summary: Someone makes a GET request with an attached \"Bearer\" token to \"/media/get/\" followed by a filename. The server responds with the content of that specific media file (audio, video, image etc.)."
    },
    "/achivements/qr/:achivement_id([0-9]+)": {
        "request": {
            "function": "achivement_qr",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves achievement-related QR code information using an API with a GET request. It requires a Bearer token in the header fields for authentication. Upon successful execution, it returns a 200 status code indicating success, along with various server headers containing metadata about the response such as the server type, date of processing, content type and length, and connection settings."
    },
    "/post/qr/:post_id([0-9]+)": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code defines a route in an API that handles GET requests for QR codes associated with specific posts. It requires a Bearer token in the request header and returns a 200 status response along with several headers when accessed successfully. Essentially, it retrieves QR code information related to a given post ID."
    },
    "/transactions/prepare": {
        "request": {
            "function": "prepare_transaction",
            "method": "post",
            "body_fields": {
                "receiver": "String",
                "amount": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is used to prepare a transaction by providing details like the receiver's information and amount. It requires authentication through a \"Bearer\" token in the header."
    },
    "/transactions/send": {
        "request": {
            "function": "transfer",
            "method": "post",
            "body_fields": {
                "tr_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method performs a \"transfer\" action using a POST request. The function expects two types of data: body_fields which include 'tr_id' as a string, and header_fields that require a 'Bearer' token. It doesn't detail the process, but simply states its purpose - transferring something (likely money or data)."
    },
    "/transactions/balance": {
        "request": {
            "function": "get_balance",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "text": "262",
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves a user's current balance by using the GET request on '/transactions/balance' endpoint. The 'Bearer' token is included in the header for authentication purposes."
    },
    "/transactions/my": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "transactionid": "19",
                        "amount": "100",
                        "sender": "scv-7",
                        "receiver": "scv-8",
                        "transactiontime": "2025-02-23 12:55:16.552781"
                    },
                    {
                        "transactionid": "20",
                        "amount": "100",
                        "sender": "scv-7",
                        "receiver": "scv-8",
                        "transactiontime": "2025-02-23 13:09:05.239221"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet describes a GET request to '/transactions/my' which requires a 'Bearer' header field. Upon receiving this request, the server responds with a 200 status code (indicating success). The response body contains an object with two transaction records for the user making the request. Each record includes details like transaction ID, amount, sender name ('scv-7'), receiver name ('scv-8'), and the time the transaction was made. The response also includes multiple headers, such as 'Server', 'Date', 'Content-Type', 'Content-Length', and 'Connection', providing additional information about how the data is being served."
    },
    "/social/authors": {
        "request": {
            "function": "get_authors_list",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of authors using a GET request. The response includes a status code (200 indicates success) and the result which currently contains an empty list. Additional headers provide server information and other technical details about the response delivery."
    },
    "/social/news:search(.*)": {
        "request": {
            "function": "get_news",
            "method": "get",
            "params": [
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves news using a GET request. It requires two parameters: 'start' for initial position in the data and 'size' indicating amount of items to return. 'Bearer' is expected in the header fields for authentication."
    },
    "/social/comments:search(.*)": {
        "request": {
            "function": "get_comments",
            "method": "get",
            "params": [
                "post_id",
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet represents a route for searching comments associated with a particular post. It uses GET requests to retrieve comment data via the `get_comments` function which requires the 'post_id', 'start' (position where to start fetching comments), and 'size' (number of comments to fetch) as parameters. The request must be authenticated using a 'Bearer' token. The response from this method is not explicitly defined here, but typically would contain details about the requested comments for the given post."
    },
    "/social/media/pics/:post_id(.*)": {
        "request": {
            "function": "get_post_media",
            "method": "get",
            "header_fields": [
                "pics"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of media associated with a specific post using its ID. When called, it expects to receive the post's ID as input through the URL path and returns the media content of that post in the form of an HTTP response. The status code 200 indicates success, and common headers like Server, Date, Content-Type, Content-Length, and Connection are included in the response for standard communication purposes."
    },
    "/social/new/:post_id(.*)": {
        "request": {
            "function": "get_post",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a post with a specific ID from a social platform using a GET request. It requires an authentication token (Bearer) in the header. If successful, it returns a 200 status code along with the post details or an empty list if no post is found. The response also includes standard headers for web services."
    },
    "/social/posts": {
        "request": {
            "function": "get_all_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "3",
                        "post_path": "posts/example_post_2.md",
                        "is_secret": "f",
                        "likes": "0",
                        "title": "\u041d\u043e\u0432\u043e\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-05-02 22:03:07.486935",
                        "saved_count": "0",
                        "category": "0",
                        "category_name": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0422\u041e\u041f",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "f"
                    },
                    {
                        "post_id": "264",
                        "post_path": "posts/example_post_3.md",
                        "is_secret": "f",
                        "likes": "0",
                        "title": "\u041e\u0431\u0440\u0430\u0437\u0435\u0446 \u041c\u0414",
                        "author": "-",
                        "text": "",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-06-17 02:13:00.511784",
                        "saved_count": "0",
                        "category": "0",
                        "category_name": "0",
                        "avatar_pic": "",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "f"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves all posts from a social platform. It uses a GET request with a \"Bearer\" token in the header for authentication. The response includes details of each post such as its ID, path, if it's secret, likes/dislikes count, author, text content, date, saved counts, categories, avatar picture, and whether they were liked or disliked by the user."
    },
    "/social/titles": {
        "request": {
            "function": "get_all_titles",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "112",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 65"
                    },
                    {
                        "post_id": "285",
                        "title": "sdfsdf"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves all titles from a specific social platform. It sends a GET request to the '/social/titles' endpoint with an authentication token in the header. The response provides details about each title including its ID and content, returning this information in JSON format."
    },
    "/social/saved": {
        "request": {
            "function": "get_saved_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "102",
                        "post_path": "",
                        "is_secret": "f",
                        "likes": "-32",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 1",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043f\u043e\u0441\u0442 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043cn\u0438 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439",
                        "dislikes": "82",
                        "parent_id": "",
                        "date": "2025-04-23 17:36:21.293235",
                        "saved_count": "0",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442=20\u0412\u0410\u041f\u0412\u0410\u041f",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "t"
                    },
                    {
                        "post_id": "110",
                        "post_path": "",
                        "is_secret": "f",
                        "likes": "10",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 9",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043f\u043e\u0441\u0442 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043cn\u0438 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439",
                        "dislikes": "2",
                        "parent_id": "",
                        "date": "2025-04-23 17:36:21.293235",
                        "saved_count": "1",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442=20\u0412\u0410\u041f\u0412\u0410\u041f",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "t"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves saved posts for a user. It accepts a GET request with a 'Bearer' token in the header. The response includes details of each saved post like ID, author, text, date, likes/dislikes count, and other metadata. If a post is liked or saved by the user, those statuses are indicated."
    },
    "/social/save": {
        "request": {
            "function": "delete_saved_post",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a saved post using its ID. It requires an authentication token in the header for authorization and accepts the post's ID as input to specify which post should be removed from the list of saved posts."
    },
    "/social/search:search(.*)": {
        "request": {
            "function": "search_by_title",
            "method": "get",
            "params": [
                "title"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code describes a method that performs a search operation based on a given title. It utilizes a GET request with specific parameters: 'title', and includes an authorization header using \"Bearer\". The response details are unspecified. Essentially, this method allows searching for items by title in a system or service that supports such functionality."
    },
    "/social/like": {
        "request": {
            "function": "delete_like",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a like for a specific post."
    },
    "/social/dislike": {
        "request": {
            "function": "delete_dislike",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a dislike on a specific post. It requires an authentication token (in \"Bearer\" format) and the ID of the post to remove the dislike from."
    },
    "/social/comments": {
        "request": {
            "function": "add_comment",
            "method": "post",
            "body_fields": {
                "comment": "String",
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to add a comment on a specific post by providing the comment text and the ID of the post in a POST request. The request requires an authorization token in the header for authentication."
    },
    "/social/categories": {
        "request": {
            "function": "get_post_categories",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "category": "0",
                        "category_name": "0"
                    },
                    {
                        "category": "0",
                        "category_name": "\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0422\u041e\u041f"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves categories for posts. It sends a GET request to '/social/categories' which returns the status code 200 indicating success. The response includes details about categories such as their ID and name."
    },
    "/social/bycat/:category([0-9\\-]+)": {
        "request": {
            "method": "get"
        },
        "response": {},
        "explanation": "This code snippet represents a route configuration in an application. When this specific route `/social/bycat/:category([0-9\\\\-]+)` is accessed using a GET request, it triggers the 'response' defined below. Essentially, it means that when someone requests information on social content categorized by a certain identifier (which can include numbers and hyphens), the system processes this request with the steps outlined in the 'response'."
    },
    "/achivements/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "5",
                        "username": "scv-7",
                        "achivement_id": "2",
                        "datetime": "2025-01-16 00:32:04.305811",
                        "stage": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 2",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 2 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet describes a GET request to an endpoint that retrieves achievements for a specific user. The user's username is taken as a parameter in the URL path. Upon receiving this request, a function named 'user_achivemets' is called which likely interacts with a database or data source to fetch all achievements related to the provided username.\n\nThe response indicates a successful operation (HTTP status code 200) and returns an array of achievement objects each containing details such as ID, username who achieved it, date & time of achieving, stage, picture URL, name, description, tree ID, level, stages count, category ID, category name, and department ID. \n\nIn simple terms, this method fetches all achievements for a user when requested with their username via an API endpoint using GET request."
    },
    "/achivements/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "32",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 32",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 32 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "24",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 24",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 24 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code describes a function that retrieves all achievements for a user specified by their username. It uses GET request method to fetch information about each achievement including ID, username, details of the achievement like its name and description, its place in the achievement tree, level, stages involved, category, and department ID. The function returns this data in JSON format with HTTP status code 200 indicating success."
    },
    "/achivements/add": {
        "request": {
            "function": "add_achivement",
            "method": "post",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to add an achievement by providing a username and an achievement ID. It requires authentication through a 'Bearer' token."
    },
    "/achivements/delete": {
        "request": {
            "function": "delete_achivement",
            "method": "delete",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method `delete_achievement` allows you to remove a specific achievement by its ID from a user's list of achievements. It requires two parameters: 'username' for identifying the user and 'achivement_id' for specifying which achievement to delete. The request must include an authentication token in the header, typically in the format \"Bearer [token_value]\"."
    },
    "/achivements/tree/:tree_id([0-9]+)": {
        "request": {
            "function": "achivements_tree",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "4",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 4",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 4 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "achivement_id": "18",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 18",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 18 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about achievements in a specific tree structure. It uses details like achievement ID, picture, name, description, level, stages, category, department ID, and names to provide data about each achievement within the given tree."
    },
    "/achivements/info/:achivement_id([0-9]+)": {
        "request": {
            "function": "achivement_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 1",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 1 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "0",
                        "stages": "1",
                        "category": "1",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about a specific achievement (achievement_info) using its ID. The response includes details such as the ID of the achievement, picture, name, description, tree level, stages, category number and name, department ID, status code, date, content type, content length, and connection settings."
    },
    "/achivements/create": {
        "request": {
            "function": "create_achivement",
            "method": "post",
            "body_fields": {
                "name": "String",
                "tree_id": "Int",
                "level": "Int",
                "pic": "String",
                "description": "String",
                "stages": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method creates a new achievement. It accepts details such as name, tree ID, level, picture URL, description, and stages count in its request body. The 'Bearer' token is required for authentication in the request headers. Upon successful execution, it returns no explicit response data but likely updates or adds the new achievement to the system."
    },
    "/achivements/pictures": {
        "request": {
            "function": "achivement_pictures",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/achivements/example_1.png",
                    "images/achivements/example_1.jpg"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of achievement pictures' paths. It sends a GET request to fetch URLs pointing to images related to achievements. The response includes these image path URLs in a 'result' field along with standard server headers."
    },
    "/achivements/no_dep": {
        "request": {
            "function": "no_department_achivements",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "32",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 32",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 32 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "24",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 24",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 24 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of achievements that do not belong to any department. It accepts an authorization token (Bearer) as a header field in a GET request. The response includes details about each achievement such as its ID, name, description, stage, picture, tree level, stages count, category, and whether it's associated with a specific department (indicated by the departmentID). If no achievements are found, or an error occurs, appropriate status codes and messages would be returned."
    },
    "/achivements/by_user": {
        "request": {
            "function": "department_achivements_by_user",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "5",
                        "username": "scv-7",
                        "achivement_id": "2",
                        "datetime": "2025-01-16 00:32:04.305811",
                        "stage": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 2",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 2 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "14",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 14",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 14 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "0"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves achievement information for a specific user. It uses a GET request with a 'Bearer' authentication token to fetch details about achievements, including their ID, username associated with them, stage they're at, the picture and name of the achievement, its description, tree it belongs to, level, number of stages, category, category name, department ID, date time stamp, server information, content type, content length, and connection status."
    },
    "/achivements/qr_code/:achivement_id([0-9]+)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code represents a route for handling GET requests to retrieve information about an achievement using its unique ID. Specifically, when this route receives a request with the URI `/achivements/qr_code/:achivement_id([0-9]+)`, it is expected to process the request and return a 200 HTTP status code (indicating success), alongside certain headers like Server, Date, Content-Type, Content-Length, and Connection information. The `:achivement_id([0-9]+)` part signifies that an integer value should be captured for `achivement_id` in the request's URI, which will then be used to identify or fetch the corresponding achievement data from the system being served by this route."
    },
    "/post/:id(\\d+)": {
        "request": {
            "function": "get_page_content",
            "method": "get"
        },
        "response": {},
        "explanation": "This method retrieves content from a webpage identified by its numerical ID. When accessed via GET request with this specific ID path pattern, it invokes the 'get_page_content' function to fetch the corresponding page's data."
    },
    "/post/author/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "get_page_author",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "avatar_pic": "images/avatars/example_1.png"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about a specific author from a website. It takes the username as input and returns details such as the username and avatar picture associated with that user. The response includes status code 200 indicating success, and the data requested by the user."
    },
    "/post/add_page": {
        "request": {
            "function": "add_page",
            "method": "post",
            "body_fields": {
                "post_path": "String",
                "category": "String",
                "title": "String",
                "is_secret": "Bool",
                "author": "String",
                "text": "String",
                "likes": "Int",
                "dislikes": "Int",
                "saved": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to add a new page by providing details such as its path, category, title, if it's secret, author, text content, number of likes, dislikes, and saves. You authenticate the request using a 'Bearer' token."
    },
    "/post/update_likes": {
        "request": {
            "function": "update_likes",
            "method": "put",
            "body_fields": {
                "post_id": "Int",
                "likes": "Int"
            }
        },
        "response": {},
        "explanation": "This method updates the number of likes for a specific post. It accepts two parameters: `post_id`, which identifies the post to modify, and `likes`, which specifies the new like count for that post. The 'put' method indicates it modifies existing data, specifically updating the likes count associated with the given post ID."
    },
    "/post/favourite/": {
        "request": {
            "function": "get_favourite_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves favorite posts using an API request with a GET method. It requires a 'Bearer' token in the header for authentication. The response returns the status code 200 indicating success and includes standard server headers."
    },
    "/post/favourite": {
        "request": {
            "function": "post_add_favourite_post",
            "method": "post",
            "body_fields": {
                "post_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method adds a post to your list of favorites. You provide the ID of the post you want to favorite using the \"post_id\" field in your request body. To use this method, you need to include an authentication token (the \"Bearer\" type) in your headers for authorization."
    },
    "/post/favourite/:id(\\d+)": {
        "request": {
            "function": "delete_favourite_post",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a favorite post by its ID. It uses a DELETE request with an authorization header to achieve this action."
    },
    "/post/rename_category": {
        "request": {
            "function": "rename_category",
            "method": "put",
            "body_fields": {
                "old_name": "String",
                "new_name": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to rename a category by sending a PUT request with two fields: `old_name` for the current name of the category and `new_name` for the new desired name. The request must include an authorization token in the headers, specifically using the \"Bearer\" type. Upon receiving this request, the system will update the name of the specified category to the provided new name."
    },
    "/post/delete": {
        "request": {
            "function": "delete_post",
            "method": "delete",
            "body_fields": {
                "post_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The provided code snippet describes a method that performs a DELETE operation on a specific endpoint \"/post/delete\". This method requires two types of input:\n\n1. **Function**: It specifies the function being executed, which in this case is 'delete_post'. The purpose of this field appears to indicate what action will be carried out.\n\n2. **Method**: It's stated as 'delete', indicating HTTP DELETE method will be used for data manipulation at the specified endpoint.\n\n3. **Body Fields**: There's one required integer field named 'post_id' that needs to be passed in the request body. This identifier is likely used to uniquely identify which post should be deleted from the system.\n\n4. **Header Fields**: The requirement of a 'Bearer' token suggests that this method uses an authentication scheme where the token acts as proof of authorization for accessing the resource. \n\nIn summary, this method enables deletion of a particular post by providing its ID and requiring proper authentication through a Bearer token."
    },
    "/post/update": {
        "request": {
            "function": "update_post",
            "method": "put",
            "body_fields": {
                "post_id": "String",
                "text": "String",
                "is_secret": "String",
                "likes": "String",
                "dislikes": "String",
                "saved_count": "String",
                "title": "String",
                "author": "String",
                "category": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is used to update a post. You need to provide the ID of the post you want to modify along with the new text, title, author, category details if needed. It also allows for specifying whether the post should be 'is_secret', likes, dislikes and saved_count as string values. The request should be made using the HTTP method 'PUT' accompanied by a Bearer token in the headers."
    },
    "/authors_list": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "avatar_pic": "images/avatars/example_1.png"
                    },
                    {
                        "username": "scv2",
                        "avatar_pic": "/images/avatars/example_5.png"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code represents a GET request for an author list. The request uses the 'Bearer' type header and aims to retrieve information about authors (specifically their usernames and avatar pictures). When successfully processed, the response provides this data in JSON format, with each author listed under the 'result' key. The status code 200 indicates a successful operation."
    }
}