{
    "explanation:": {
        "request": {
            "function": "technical field, just for backend",
            "method": "allowed REST API method",
            "body_fields": "required fields in request body",
            "header_fields": "required fields in request header"
        },
        "response": {
            "status_code": "response status code",
            "headers": "response headers",
            "text": "response text",
            "body": "response body, only first 2 results"
        }
    },
    "/auth/login": {
        "request": {
            "function": "enable_auth",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String"
            }
        },
        "response": {},
        "explanation": "The method `/auth/login` allows a user to authenticate by providing their login credentials (login and password). When using the POST request method with this endpoint, these details are submitted in the body of the request. The system processes these inputs and either enables authentication if valid or returns an error response for invalid credentials."
    },
    "/auth/reg": {
        "request": {
            "function": "enable_reg",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String",
                "temp_token": "String"
            }
        },
        "response": {},
        "explanation": "The method described enables registration by handling a POST request. It expects three fields in the request body: 'login', 'password', and 'temp_token'. The primary function of this method is to process these details for new user account creation."
    },
    "/auth/amiauthed": {
        "request": {
            "function": "am_i_authed",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code represents a response from an API endpoint that checks if a user is authenticated. The method used to call this endpoint is GET and includes a \"Bearer\" token in the header. When the server receives this request, it responds with a status code 200 (meaning everything is fine) and indicates in its body that the authentication status ('status') is 't', which likely stands for 'true'. The headers listed include basic information about how the response was sent, such as what server handled the request, when it was received, etc."
    },
    "/auth/amiadmin": {
        "request": {
            "function": "am_i_admin",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if the user authenticated with a specific token (Bearer) is an admin. It sends a GET request to '/auth/amiadmin' endpoint. If the user is an admin, it returns a status code 200 and in the response body, 'status': 't'. Otherwise, it might return a different status code or no data at all indicating the user is not an admin."
    },
    "/auth/isactive/:username(.*)": {
        "request": {
            "function": "is_user_active",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user with a given username is active. It returns an HTTP response status code of 200 with a body indicating 't' for true (the user is active) when requested using the GET method. The response also includes standard HTTP headers like Server, Date, Content-Type, and others."
    },
    "/auth/isuser/:username(.*)": {
        "request": {
            "function": "is_user",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user with the given username exists. It returns a status code of 200 with a \"t\" in the body indicating success, essentially confirming whether the requested user exists or not."
    },
    "/auth/delete": {
        "request": {
            "function": "enable_delete",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method, when called using the HTTP `DELETE` request, enables deletion functionality via an authentication token (specified in the 'Bearer' header). It doesn't provide any output, suggesting the operation might modify a state internally without returning data."
    },
    "/auth/add_userrights": {
        "request": {
            "function": "add_userrights",
            "method": "put",
            "body_fields": {
                "username": "String",
                "rights": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method `add_userrights` allows you to update user permissions by sending a HTTP PUT request. You need to specify the `username` and their associated `rights`. The request must include an access token in the headers for authentication."
    },
    "/auth/change_username": {
        "request": {
            "function": "change_username",
            "method": "put",
            "body_fields": {
                "new_username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows a user to change their username by sending an HTTP PUT request. The new desired username must be included in the request body as \"new_username\". The request needs to include an authentication token in the header under 'Bearer'. No other details are provided about how or why it accomplishes this task, just that it facilitates changing a user's name through the specified protocol and parameters."
    },
    "/auth/change_password": {
        "request": {
            "function": "change_password",
            "method": "put",
            "body_fields": {
                "unlogin": "Bool",
                "new_password": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows a user to change their password by providing their current login status (True/False) and the new password they want to set. The request must include an authentication token in the header for authorization."
    },
    "/auth/register_true": {
        "request": {
            "function": "register_true",
            "method": "put",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The provided code snippet represents an API endpoint setup in a programming environment (likely for web development). This endpoint accepts HTTP PUT requests containing a 'Bearer' token in its headers. The function `register_true` seems to handle the request process, with the comment suggesting that it authenticates and potentially registers new users based on valid input data.\n\nIn essence, this method is designed for user registration where:\n\n1. **Request Method**: Users send an HTTP PUT request to this endpoint.\n2. **Header Field 'Bearer'**: It requires a token (Bearer token) in its headers, which typically includes authorization credentials or session identifiers necessary to authenticate the request.\n3. **Function `register_true`**: This function processes the incoming request and validates user inputs. If valid, it registers the user based on the provided data.\n\nThe specific details of how this is implemented\u2014such as database interactions, validation rules, encryption methods for tokens, etc.\u2014are not covered by this snippet but would be part of the implementation logic that follows this setup."
    },
    "/auth/isadmin/:username(.*)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a specific user (identified by the `username` parameter) is an admin. When a GET request is made to this endpoint with the desired username, if the user is indeed an admin, it returns a 200 status code with a body stating \"t\", indicating true. If the user is not an admin, no response is sent back."
    },
    "/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_1.png",
                        "active": "t",
                        "times_visited": "1",
                        "departmentid": "0",
                        "rolename": "\u043f\u0438\u043f\u0430",
                        "registered": "t"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet defines a route for fetching user information. It uses dynamic parameter `:username` which can contain alphanumeric characters or dashes to identify specific users. When this route is accessed, the server executes 'user_info' function with a GET request method to retrieve details about the specified user.\n\nThe response includes:\n1) Status Code 200 indicating successful operation.\n2) The result which contains user-specific data like ID, username, rights, join time, avatar picture, activity status, visit count, department ID, role name, registration status etc. \n\nIn essence, this method allows users to fetch details about any user by their unique username through an HTTP GET request on this defined route."
    },
    "/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "balance": "262",
                        "registered": "t",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_1.png",
                        "active": "t",
                        "times_visited": "1",
                        "role": "\u043f\u0438\u043f\u0430",
                        "paycheck": "1000",
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves detailed information about a user specified by their username. It uses GET request to fetch data like user ID, username, rights, balance, registration date, avatar picture, status indicators (active, visited times), role, paycheck, department ID and name. The response includes the status code 200 indicating success along with the user details in JSON format and headers related to server communication."
    },
    "/user/roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100",
                        "departmentname": "somewhere"
                    },
                    {
                        "username": "scv-7",
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves user roles for a specific username. It uses HTTP GET to request role information associated with the provided username (in this case, 'scv-7'). The response includes details about the user's roles, such as role IDs, names, ranges, department IDs, payments, and department names."
    },
    "/user/unactive_roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_unactive_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "0",
                        "rolename": "somewhere",
                        "rang": "0",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code appears to represent a response from an API endpoint that retrieves inactive roles for a specific user. The method returns details about these inactive roles in JSON format, including role ID, name, range, associated department's ID and name, and payment information. If successful (HTTP status 200), it provides data for multiple roles the user doesn't seem to be actively using, based on the context provided by the 'result' key within the body of the response."
    },
    "/user/add_role": {
        "request": {
            "function": "add_user_role",
            "method": "post",
            "body_fields": {
                "username": "String",
                "role_id": "Int",
                "role": "String",
                "department": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method \"add_user_role\" is used to add a specific role for a user in a system. This involves specifying the username of the user, the ID or type of the desired role, and optionally the department they belong to. The action requires authentication through an access token, which needs to be provided in the request headers."
    },
    "/user/delete_role": {
        "request": {
            "function": "delete_user_role",
            "method": "delete"
        },
        "response": {},
        "explanation": "The `delete_user_role` method is being used to remove a role from a user."
    },
    "/user/create_role": {
        "request": {
            "function": "create_role",
            "method": "post",
            "body_fields": {
                "payment": "Int",
                "role": "String",
                "department": "Int",
                "rang": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method creates a new role with the provided parameters (payment, role, department, rang). It uses a POST request and requires a 'Bearer' authentication token. The specific details of how this is implemented are not described in this snippet."
    },
    "/user/department/roles/:department([0-9]+)": {
        "request": {
            "function": "department_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "11",
                        "rolename": "starter",
                        "rang": "0",
                        "departmentid": "1",
                        "payment": "-10"
                    },
                    {
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about roles within a specific department. It returns details like role ID, name, rank, associated department ID, and payment rate for each role."
    },
    "/user/department/name/:department([0-9]+)": {
        "request": {
            "function": "department_name",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "department": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves department names based on a provided identifier. It returns a status code of 200 indicating success, with the result being a single department named 'somewhere'. The response also includes common HTTP headers for serving content."
    },
    "/user/set_department": {
        "request": {
            "function": "set_users_department",
            "method": "put",
            "body_fields": {
                "department": "String",
                "username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows updating a user's department. It takes two parameters: `department` (a string specifying the new department for the user) and `username` (the unique identifier of the user). A 'Bearer' token must be provided in the headers for authentication. The function performs an HTTP PUT request to update the specified user's department details."
    },
    "/user/department/roles": {
        "request": {
            "function": "all_departments",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "departmentid": "1",
                        "departmentname": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method is retrieving information about all departments. It sends a GET request to access this data and returns a response containing details for each department including their ID and name. The response includes status codes, headers detailing server configuration like content type and length of the returned message."
    },
    "/user/department/start/:department(.*)": {
        "request": {
            "function": "starter_role",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "text": "11",
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method is retrieving information for a specific department using its name as part of the URL. The function being called to handle this request is 'starter_role'. The response will have a status code of 200 indicating success, and the text returned will be '11'. The headers include basic server details like date, type of content, length of data, and connection settings."
    },
    "/user/all_avatars": {
        "request": {
            "function": "all_avatars",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/avatars/example_1.png",
                    "images/avatars/example_5.png"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method `all_avatars` retrieves a list of all available avatar images. It responds with a status code 200 indicating success, returning an array containing paths to two example avatar images ('example_1.png' and 'example_5.png') as part of its body. The response is served using standard HTTP headers like Server, Date, Content-Type, Content-Length, and Connection."
    },
    "/user/set_avatar": {
        "request": {
            "method": "put",
            "body_fields": {
                "avatar": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method described allows a user to change their avatar (profile picture) by sending an HTTP PUT request with the new avatar data in the body and including a Bearer token in the headers for authentication."
    },
    "/media/get/:filename(.*)": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This configuration describes a route that handles HTTP GET requests with a \"Bearer\" header for retrieving media content. The path of the request should include a filename specified by \":filename\", which gets captured and can be used within the route handler code. There's no response defined here, implying that it might either return the requested file directly or an error if something goes wrong, but this detail isn't specified in this configuration snippet."
    },
    "/transactions/prepare": {
        "request": {
            "function": "prepare_transaction",
            "method": "post",
            "body_fields": {
                "receiver": "String",
                "amount": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method \"prepare_transaction\" is a function that gets triggered via a POST request. It takes two pieces of information as input: \n1) 'receiver' - which should be in string format\n2) 'amount' - this needs to be an integer\n\nThe purpose of this method seems to prepare or set up the transaction with these details without executing it. The 'header_fields' requirement ('Bearer') indicates that some form of authentication is needed before this request can proceed.\n\nIn essence, you're defining a transaction by specifying who it's going to (receiver) and how much (amount), but the actual execution of the transaction isn't happening within this method itself."
    },
    "/transactions/send": {
        "request": {
            "function": "transfer",
            "method": "post",
            "body_fields": {
                "tr_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method initiates a transfer using the 'transfer' function via a POST request. It requires a 'tr_id' string as part of the body fields and authentication through 'Bearer' in the header fields. The response details are yet to be defined."
    },
    "/transactions/balance": {
        "request": {
            "function": "get_balance",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "text": "262",
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves the current balance using a GET request with a \"Bearer\" token in the header. It returns the status code 200 along with the text '262' which represents the balance amount and various headers that provide information about the response such as server details, date, content type etc."
    },
    "/transactions/my": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "transactionid": "19",
                        "amount": "100",
                        "sender": "scv-7",
                        "receiver": "scv-8",
                        "transactiontime": "2025-02-23 12:55:16.552781"
                    },
                    {
                        "transactionid": "20",
                        "amount": "100",
                        "sender": "scv-7",
                        "receiver": "scv-8",
                        "transactiontime": "2025-02-23 13:09:05.239221"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method is fetching data about transactions made by the user from a system using their authentication token (Bearer). It returns details of two recent transactions including transaction ID, amount, sender, receiver, and time. The response includes standard server headers."
    },
    "/social/authors": {
        "request": {
            "function": "get_authors_list",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of authors from a social platform using a GET request. It returns a response with a status code indicating success (200) along with headers and an empty result array since no authors are specified in the provided data."
    },
    "/social/news:search(.*)": {
        "request": {
            "function": "get_news",
            "method": "get",
            "params": [
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method searches for news using specified parameters like starting point ('start') and size ('size'). It uses a GET request with a 'Bearer' authentication header to call the 'get_news' function. The response details are not provided, implying they're returned by the function called."
    },
    "/social/comments:search(.*)": {
        "request": {
            "function": "get_comments",
            "method": "get",
            "params": [
                "post_id",
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is searching for comments related to a specific post using details like the post's ID, starting point for results, and number of comments desired. It uses an API request with a 'Bearer' token for authentication. The response will include the requested comments."
    },
    "/social/media/pics/:post_id(.*)": {
        "request": {
            "function": "get_post_media",
            "method": "get",
            "header_fields": [
                "pics"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves media associated with a specific post using its ID. It sends a GET request to access this information and returns a response indicating whether the operation was successful (with status code 200) along with any server headers and the list of media related to that post, which will be an empty list if no media exists for it."
    },
    "/social/new/:post_id(.*)": {
        "request": {
            "function": "get_post",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a post by its ID from a social network using an HTTP GET request with a Bearer token for authentication. If successful, it returns a 200 status code along with headers indicating server information and the content type of the response body, which should contain an empty array if no results are found or if the post does not exist in the database."
    },
    "/social/posts": {
        "request": {
            "function": "get_all_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "3",
                        "post_path": "posts/example_post_2.md",
                        "is_secret": "f",
                        "likes": "0",
                        "title": "-",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-05-02 22:03:07.486935",
                        "saved_count": "0",
                        "category": "0",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "f"
                    },
                    {
                        "post_id": "2",
                        "post_path": "posts/example_post.md",
                        "is_secret": "t",
                        "likes": "0",
                        "title": "secret page",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e  \u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-05-02 21:11:31.404448",
                        "saved_count": "0",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "f"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves all posts from a system. It gets this data by making a GET request using 'Bearer' authentication headers. The response provides details about each post including its ID, file path, whether it's secret, likes and dislikes count, title, author, text content, date posted, save count, category, avatar picture link, if the user has liked or saved the post, and other meta data."
    },
    "/social/titles": {
        "request": {
            "function": "get_all_titles",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "103",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 2"
                    },
                    {
                        "post_id": "102",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves all titles from a social platform's posts. When executed via GET request with a 'Bearer' authentication header, it returns a list of post IDs along with their respective titles in JSON format. The response also includes standard server headers for status and content details."
    },
    "/social/saved": {
        "request": {
            "function": "get_saved_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "102",
                        "post_path": "",
                        "is_secret": "f",
                        "likes": "-32",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 1",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043f\u043e\u0441\u0442 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043cn\u0438 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439",
                        "dislikes": "82",
                        "parent_id": "",
                        "date": "2025-04-23 17:36:21.293235",
                        "saved_count": "0",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "t"
                    },
                    {
                        "post_id": "104",
                        "post_path": "",
                        "is_secret": "f",
                        "likes": "6",
                        "title": "\u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f 3",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e \u043f\u043e\u0441\u0442 \u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043cn\u0438 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439",
                        "dislikes": "11",
                        "parent_id": "",
                        "date": "2025-04-23 17:36:21.293235",
                        "saved_count": "1",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "avatar_pic": "images/avatars/example_1.png",
                        "is_liked": "f",
                        "is_disliked": "f",
                        "saved": "t"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves saved posts. It uses a GET request with a \"Bearer\" token in the header to get information about posts that have been saved by a user. The response provides details like post ID, title, author, text content, likes and dislikes count, and whether it's liked or disliked by the user who made the request."
    },
    "/social/save": {
        "request": {
            "function": "delete_saved_post",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a saved post identified by its ID from your saved content. You authenticate using a Bearer token in the headers."
    },
    "/social/search:search(.*)": {
        "request": {
            "function": "search_by_title",
            "method": "get",
            "params": [
                "title"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves information through a search operation based on a provided title. It uses the GET request method and includes a token for authorization in the header fields."
    },
    "/social/like": {
        "request": {
            "function": "delete_like",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method removes a \"like\" for a specific post using a delete request with a JSON body containing the 'post_id' string field. It requires an authorization token (Bearer) in the headers to execute the operation."
    },
    "/social/dislike": {
        "request": {
            "function": "delete_dislike",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a dislike for a specific post. It requires a user to provide their \"Bearer\" authentication token and the ID of the post they want to remove their dislike from."
    },
    "/social/comments": {
        "request": {
            "function": "add_comment",
            "method": "post",
            "body_fields": {
                "comment": "String",
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to add a comment on a post. You provide the comment text and the ID of the post in a POST request with a 'Bearer' token in the headers. The server processes this information and adds your comment to the specified post."
    },
    "/social/categories": {
        "request": {
            "function": "get_post_categories",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "category": "0",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442"
                    },
                    {
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method `get_post_categories` retrieves information about categories of posts. It uses a GET request to fetch details like category IDs ('0' and '1') and their respective names ('\u0434\u0435\u0444\u043e\u043b\u0442' and '\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442'). The response provides the status code (200 indicating success) and the fetched data in its body, along with server headers for context."
    },
    "/social/bycat/:category([0-9\\-]+)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "2",
                        "post_path": "posts/example_post.md",
                        "is_secret": "t",
                        "likes": "0",
                        "title": "secret page",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e  \u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-05-02 21:11:31.404448",
                        "saved_count": "0",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves data for a specific category from a server. When a GET request is made to '/social/bycat/:category([0-9\\\\-]+)', where ':category' is the requested category ID, the server responds with a 200 status code indicating success. The response body contains information about posts that belong to this category, such as their IDs, titles, authors, and dates. Headers like 'Server', 'Date', 'Content-Type', etc., provide additional details on how the request was handled."
    },
    "/achivements/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "5",
                        "username": "scv-7",
                        "achivement_id": "2",
                        "datetime": "2025-01-16 00:32:04.305811",
                        "stage": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 2",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 2 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves user achievements. It takes a username as input (which can contain letters, numbers, and dashes), then uses this information to fetch specific achievements related to that user. The achievements include details like ID, stage, description, picture link, tree category, level, stages count, department ID, etc. After gathering all necessary data, the method returns a status code of 200 indicating success, along with the collected achievements in the response body and standard server headers for the request."
    },
    "/achivements/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "32",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 32",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 32 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "24",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 24",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 24 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a detailed list of achievements for a specific user. It accepts a username as input and returns information about each achievement they have earned, including its ID, name, description, associated image, stages required to obtain the achievement, its level, the number of steps in its process, category, department id, tree it belongs to, and the stage reached within that process. The method uses a GET request type."
    },
    "/achivements/add": {
        "request": {
            "function": "add_achivement",
            "method": "post",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is used to add an achievement. It requires a username and an achievement ID as inputs. The addition of the achievement is authenticated using a 'Bearer' token."
    },
    "/achivements/delete": {
        "request": {
            "function": "delete_achivement",
            "method": "delete",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes an achievement for a specific user. It needs the user's username and the ID of the achievement to delete. The request must be made using the HTTP 'delete' method and include a 'Bearer' token in the headers."
    },
    "/achivements/tree/:tree_id([0-9]+)": {
        "request": {
            "function": "achivements_tree",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "4",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 4",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 4 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "achivement_id": "18",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 18",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 18 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about achievements organized in a tree structure. It accepts an ID of a specific tree, then returns details like achievement IDs, names, descriptions, levels, stages, categories, and department IDs associated with that tree. The response includes the status code 200 indicating success, along with headers for server communication."
    },
    "/achivements/info/:achivement_id([0-9]+)": {
        "request": {
            "function": "achivement_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 1",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 1 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "0",
                        "stages": "1",
                        "category": "1",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves detailed information about a specific achievement using its ID. It performs a GET request to fetch data including the achievement's name, description, associated tree, level, stages, category, and department ID. The response includes this data in JSON format along with server and content-related headers."
    },
    "/achivements/create": {
        "request": {
            "function": "create_achivement",
            "method": "post",
            "body_fields": {
                "name": "String",
                "tree_id": "Int",
                "level": "Int",
                "pic": "String",
                "description": "String",
                "stages": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method creates a new achievement. It requires several details such as name, tree ID, level, picture link, description, and stages count to form the achievement data. The creation process must authenticate using 'Bearer' token before executing this operation."
    },
    "/achivements/pictures": {
        "request": {
            "function": "achivement_pictures",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/achivements/example_1.png",
                    "images/achivements/example_1.jpg"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves a list of achievement picture filenames from a server."
    },
    "/achivements/no_dep": {
        "request": {
            "function": "no_department_achivements",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "32",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 32",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 32 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "24",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 24",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 24 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about achievements that do not belong to any specific department. It accepts a request with a \"Bearer\" header field and returns a response containing details of multiple achievements like their ID, username, description, image link, name, stage, tree level, stages, category, category name, and department ID. The 'id', 'username', 'datetime', 'stage' fields are empty indicating that these specific details might be filled in later or are not applicable for non-department related achievements."
    },
    "/achivements/by_user": {
        "request": {
            "function": "department_achivements_by_user",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "5",
                        "username": "scv-7",
                        "achivement_id": "2",
                        "datetime": "2025-01-16 00:32:04.305811",
                        "stage": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 2",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 2 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "14",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 14",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 14 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "0"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves department achievements for a specific user. It uses a GET request with a Bearer token in the header to access this information from an API endpoint. The response includes details such as achievement IDs, names, descriptions, stages, images, levels, category names, and timestamps related to these achievements for the specified user."
    },
    "/achivements/qr_code/:achivement_id([0-9]+)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method handles a GET request for QR code achievements identified by their ID. It returns a 200 status indicating successful service operation along with specific headers related to server information, date, content type, content length and connection status."
    },
    "/post/:id(\\d+)": {
        "request": {
            "function": "get_page_content",
            "method": "get"
        },
        "response": {},
        "explanation": "The method described here is called `get_page_content`. When this function receives a request with the specified pattern (specifically, when an HTTP GET request is made to an endpoint formatted as `/post/:id(\\\\d+)`, where `:id` is a placeholder for an integer value), it retrieves or returns the content associated with that particular page identified by the numerical ID included in the URL. In other words, it fetches and provides the details of the post corresponding to the given numeric ID."
    },
    "/post/author/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "get_page_author",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "avatar_pic": "images/avatars/example_1.png"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code describes a response from an API that retrieves information about an author by their username. When this specific API method (get_page_author) receives a GET request with a username parameter in its URL, it returns the author's details including their username and avatar picture. The example uses 'scv-7' as a placeholder for the actual username and provides a sample image path for the avatar."
    },
    "/post/add_page": {
        "request": {
            "function": "add_page",
            "method": "post",
            "body_fields": {
                "post_path": "String",
                "category": "String",
                "title": "String",
                "is_secret": "Bool",
                "author": "String",
                "likes": "Int",
                "dislikes": "Int",
                "saved": "Int",
                "text": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to add a new page by providing details such as its path, category, title, whether it's secret, author, number of likes/dislikes/saves, and text content. You authenticate using a 'Bearer' token in the header."
    },
    "/post/update_likes": {
        "request": {
            "function": "update_likes",
            "method": "put",
            "body_fields": {
                "post_id": "Int",
                "likes": "Int"
            }
        },
        "response": {},
        "explanation": "The `update_likes` method allows you to change the number of likes for a specific post. It accepts two parameters: `post_id`, which identifies the post, and `likes`, which specifies the new like count. The operation uses the HTTP PUT method to update the post's like count in the system."
    },
    "/post/favourite/": {
        "request": {
            "function": "get_favourite_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "headers": [
                "Server",
                "Date",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves the user's favorite posts. It uses a GET request with a \"Bearer\" token for authentication. The response includes details about the status of the operation and server headers."
    },
    "/post/favourite": {
        "request": {
            "function": "post_add_favourite_post",
            "method": "post",
            "body_fields": {
                "post_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method adds a post to someone's list of favorites. It requires the ID of the post as input and needs to be authenticated using a 'Bearer' token."
    },
    "/post/favourite/:id(\\d+)": {
        "request": {
            "function": "delete_favourite_post",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The `delete_favourite_post` method uses a DELETE request with a \"Bearer\" token header to remove a favorite post identified by its numeric ID from the system."
    },
    "/post/rename_category": {
        "request": {
            "function": "rename_category",
            "method": "put",
            "body_fields": {
                "old_name": "String",
                "new_name": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method being described allows you to change the name of a category. It uses HTTP PUT request with parameters like 'old_name' for the current category title and 'new_name' for the desired new title. The request must be authenticated using an access token specified in the Bearer header."
    },
    "/post/delete": {
        "request": {
            "function": "delete_post",
            "method": "delete",
            "body_fields": {
                "post_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method \"delete_post\" takes a request containing an integer identifier for a post to be deleted. It requires a Bearer token in the headers for authentication. The response of this operation is unspecified but typically indicates whether the deletion was successful. Essentially, it deletes a specified post from the system when called."
    },
    "/post/update": {
        "request": {
            "method": "put",
            "body_fields": {
                "post_id": "Int",
                "is_secret": "Bool",
                "likes": "Int",
                "dislikes": "Int",
                "saved": "Int",
                "title": "String",
                "author": "String",
                "text": "String",
                "category": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet describes an API endpoint configuration for updating a post. The method being described uses the HTTP PUT verb to update existing data of a post.\n\nThe required fields for this operation include:\n\n1. `post_id`: An integer that uniquely identifies the post to be updated.\n2. `is_secret`: A boolean value indicating whether the post should be made secret after updates.\n3. `likes`, `dislikes`, and `saved`: Integer counts representing user reactions and interactions with the post.\n4. `title`: A string for the new title of the post.\n5. `author`: The name or ID of the new author of the post (though note that updating this field might not make sense in typical use cases, as posts are usually authored by a single creator).\n6. `text`: The new textual content of the post.\n7. `category`: The updated category for the post.\n\nThe header should include an 'Authorization' field starting with 'Bearer' to authenticate the request.\n\nIn summary, this method allows updating various aspects of a post identified by its ID using provided parameters and requires proper authentication in the headers."
    },
    "/authors_list": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "avatar_pic": "images/avatars/example_1.png"
                    },
                    {
                        "username": "scv2",
                        "avatar_pic": "/images/avatars/example_5.png"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet describes an API request to fetch a list of authors. \n\n- The request uses GET method.\n- It requires a 'Bearer' token in its header for authentication.\n- Upon successful execution (returning status code 200), the response will contain:\n  - A 'result' field with author information, including their username and avatar picture URL.\n  - Server details like 'Server', 'Date', 'Content-Type', 'Content-Length', and 'Connection' in headers.\n\nIn essence, it retrieves a list of authors from the server using an API endpoint, where each author has a unique identifier (username) and an associated image."
    }
}