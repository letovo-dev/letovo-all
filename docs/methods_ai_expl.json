{
    "explanation:": {
        "request": {
            "function": "technical field, just for backend",
            "method": "allowed REST API method",
            "body_fields": "required fields in request body",
            "header_fields": "required fields in request header"
        },
        "response": {
            "status_code": "response status code",
            "headers": "response headers",
            "text": "response text",
            "body": "response body, only first 2 results"
        }
    },
    "/auth/login": {
        "request": {
            "function": "enable_auth",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String"
            }
        },
        "response": {},
        "explanation": "This method enables authentication by processing a POST request with specific fields: `login` as a string and `password` as a string. The response to this method is not specified."
    },
    "/auth/reg": {
        "request": {
            "function": "enable_reg",
            "method": "post",
            "body_fields": {
                "login": "String",
                "password": "String",
                "temp_token": "String"
            }
        },
        "response": {},
        "explanation": "This method enables registration functionality. It accepts POST requests with parameters including 'login', 'password', and 'temp_token'. The purpose of this interaction appears to validate these inputs to facilitate account creation."
    },
    "/auth/amiauthed": {
        "request": {
            "function": "am_i_authed",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "f"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user is authenticated by looking at a specific header field labeled 'Bearer'. If authentication details are present, it returns a status indicating that the user is indeed authorized ('f' likely stands for False in this context). The response includes standard HTTP headers like Server, Date, Content-Type, etc., but no data body."
    },
    "/auth/amiadmin": {
        "request": {
            "function": "am_i_admin",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "f"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method checks if the user is an administrator by using a GET request with a Bearer token. The response indicates whether the user has admin status or not."
    },
    "/auth/isactive/:username(.*)": {
        "request": {
            "function": "is_user_active",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user with a given username is active. When accessed using GET request on this specific route with a username, it returns a status code of 200 indicating success along with 't' which typically signifies that the user is indeed active. Other headers like Server, Date, Content-Type, etc., provide metadata about the response."
    },
    "/auth/isuser/:username(.*)": {
        "request": {
            "function": "is_user",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a specific user exists by using their username. It performs a GET request to determine the status of the user, returning a 200 HTTP status code along with 't' as an indicator that the user is indeed present. The response includes standard headers for web communication like Server, Date, Content-Type, Content-Length and Connection."
    },
    "/auth/delete": {
        "request": {
            "function": "enable_delete",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The provided information describes a method that enables and performs a DELETE request. Specifically:\n\n- **Function**: `enable_delete` - This function activates or initializes the process for deleting something (based on HTTP DELETE protocol).\n\n- **Method**: `delete` - It indicates that an HTTP DELETE operation will be carried out.\n\n- **Header Fields**: ['Bearer'] - This suggests that the request will include a \"Bearer\" token in its headers, typically used for authentication. \n\nIn essence, this method allows for the deletion of resources over HTTP by invoking a DELETE request with proper authorization via a Bearer token."
    },
    "/auth/add_userrights": {
        "request": {
            "function": "add_userrights",
            "method": "put",
            "body_fields": {
                "username": "String",
                "rights": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method 'add_userrights' allows you to grant additional rights to a user by using a PUT request. The username of the user and their new rights are provided in the body fields, while authentication is handled through a Bearer token in the header."
    },
    "/auth/change_username": {
        "request": {
            "function": "change_username",
            "method": "put",
            "body_fields": {
                "new_username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The given information describes an API method named `change_username`. This method allows a user to update their username by sending a PUT request with new username data in the body of the request. The request needs to include authentication through a 'Bearer' token, which is typically used for authorization purposes. Essentially, it facilitates the process of changing a user's name within a system or application."
    },
    "/auth/change_password": {
        "request": {
            "function": "change_password",
            "method": "put",
            "body_fields": {
                "unlogin": "Bool",
                "new_password": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The provided JSON describes a REST API endpoint that allows users to change their password. \n\n- Method: A `PUT` request is used which indicates that we are modifying existing data.\n- Path: `/auth/change_password` signifies the specific route for changing authentication information, particularly passwords.\n\nParameters:\n- `function`: \"change_password\" indicates the action being performed - altering a password.\n- `method`: \"put\" confirms this is an update operation. \n- `body_fields`: Requires two fields to be sent in the body of the request: `unlogin` (a boolean flag likely for logging out after changing password) and `new_password` (the new password string).\n- `header_fields`: An 'Authorization' header with a \"Bearer\" token is expected, used for authentication purposes.\n\nIn summary: This API endpoint handles the secure process of updating a user's password via a HTTP `PUT` request, necessitating confirmation through an existing session token and providing details like whether to log out after updating."
    },
    "/auth/register_true": {
        "request": {
            "function": "register_true",
            "method": "put",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet appears to define a route for registering a user in an application. The method `register_true` utilizes HTTP's PUT method to process registration requests. It includes 'Bearer' as part of its header fields which indicates the use of JSON Web Tokens (JWT) for authentication, suggesting that the server verifies the identity of the user by checking this token before processing the registration request. The response details are not provided, implying that a standard HTTP status code will be sent back along with any necessary data or errors related to the registration process."
    },
    "/auth/isadmin/:username(.*)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "status": "t"
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method checks if a user with a specific username has administrative privileges. When a GET request is made to this endpoint using the specified username, it returns a status code of 200 with a 't' in the body, indicating that the user is an admin. It also sends standard HTTP headers like Server, Date, Content-Type, etc., in response."
    },
    "/post/:id(\\d+)": {
        "request": {
            "function": "get_page_content",
            "method": "get"
        },
        "response": {},
        "explanation": "The method 'get_page_content' retrieves content from a webpage identified by its unique 'id'. This operation occurs when a GET request is made to an endpoint formatted as '/post/:id(\\\\d+)'. The ':id(\\\\d+)' part signifies that the 'id' is expected to be a numerical value included in the URL."
    },
    "/post/author/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "get_page_author",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "avatar_pic": "images/avatars/example_5.png"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves information about a specific author from a web page using their username. It sends a GET request to a specified URL containing the username in a route parameter. Upon receiving a successful response (with status code 200), it returns data including the username and an avatar picture associated with that user."
    },
    "/post/add_page_content": {
        "request": {
            "function": "add_page_by_content",
            "method": "post"
        },
        "response": {},
        "explanation": "The `add_page_by_content` method, when accessed via a POST request, adds new content to an existing web page."
    },
    "/post/add_page": {
        "request": {
            "function": "add_page_by_page",
            "method": "post",
            "body_fields": {
                "post_path": "String",
                "text": "String"
            }
        },
        "response": {},
        "explanation": "The `add_page_by_page` method adds a new page using POST request with two fields: `post_path` (a string representing the path of the page) and `text` (a string containing the content of the page). It doesn't specify how or where this operation is performed, only what needs to be provided for it to work."
    },
    "/post/update_likes": {
        "request": {
            "function": "update_likes",
            "method": "put",
            "body_fields": {
                "post_id": "Int",
                "likes": "Int"
            }
        },
        "response": {},
        "explanation": "The method \"update_likes\" allows for modifying the number of likes on a post. It uses the HTTP PUT request with two parameters: 'post_id' (an integer identifying the specific post) and 'likes' (the new like count, also an integer)."
    },
    "/post/delete/:id(\\d+)": {
        "request": {
            "function": "enable_delete",
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet represents a route in a web application framework like Express.js. It defines a route that handles HTTP DELETE requests for deleting an item based on its unique ID.\n\nHere's a simple explanation:\n\n1. **Route**: The route `/post/delete/:id` specifies which path this operation should be executed from. The `:id` part means that there will be a dynamic parameter in the URL, which is assumed to represent the ID of the post to delete.\n\n2. **Method**: It uses the HTTP method `DELETE`, indicating that when someone wants to perform this operation (deletion), they send an HTTP request with this method to the specified path.\n\n3. **Request Information**:\n   - **Function**: The string `'enable_delete'` suggests a custom function or method name within the application logic, indicating what specific deletion-related logic needs to be executed.\n   - **Header Fields**: `Bearer` implies that there is a requirement for an API token prefixed with \"Bearer\" in the request headers. This is often used when securing API endpoints requiring user authentication.\n\n4. **Response**:\n   - The response object `{}` indicates that this route does not return any specific content upon successful execution of its logic; it could be silently acknowledging the deletion operation without providing additional details or status codes directly from this endpoint's response body.\n\nIn essence, this setup allows for deleting a post by specifying its ID in the URL when making an HTTP DELETE request to `/post/delete/:id`. The deleted action is then executed according to the defined function (`enable_delete`) and requiring proper authentication through a \"Bearer\" token in headers."
    },
    "/post/favourite/": {
        "request": {
            "function": "get_favourite_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves a user's favorite posts. It uses a GET request with a Bearer token in the header for authentication. The response provides details of the user's favorite content."
    },
    "/post/favourite": {
        "request": {
            "function": "post_add_favourite_post",
            "method": "post",
            "body_fields": {
                "post_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is used to add a post as a favorite. When called via POST with a 'post_id' parameter specifying the desired post and a valid 'Bearer' token in the header, it adds that post to the user's favorites list."
    },
    "/post/favourite/:id(\\d+)": {
        "request": {
            "method": "delete",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is designed to delete a favorite item based on its ID. It uses the DELETE HTTP request method and requires an \"Authorization\" header with a Bearer token for authentication. The ':id' parameter represents the unique identifier of the favorite item being targeted for deletion, which must be a numeric value."
    },
    "/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_5.png",
                        "active": "t",
                        "times_visited": "1",
                        "departmentid": "0",
                        "rolename": "\u043f\u0438\u043f\u0430",
                        "registered": "t"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code snippet defines a route for retrieving user information. When this route is accessed with a specific username as part of the URL path, it calls the `user_info` function to get details about that user. The response includes HTTP status code 200 indicating success, the user's data such as ID, rights, joined time, avatar picture, activity status, visited times, department ID, role name, and registration status. It also specifies server-related headers like Server, Date, Content-Type, Content-Length, and Connection in the response."
    },
    "/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "userid": "1762",
                        "username": "scv-7",
                        "userrights": "admin",
                        "balance": "1083",
                        "registered": "t",
                        "jointime": "2024-12-05 23:52:49.393567",
                        "avatar_pic": "images/avatars/example_5.png",
                        "active": "t",
                        "times_visited": "1",
                        "role": "\u043f\u0438\u043f\u0430",
                        "paycheck": "1000",
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves full user information for a specific user by their username. It returns details like ID, username, rights, balance, registration date, avatar, activity status, visited times, role, paycheck, department ID and name. The response includes status code 200 indicating success."
    },
    "/user/roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "username": "scv-7",
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100",
                        "departmentname": "somewhere"
                    },
                    {
                        "username": "scv-7",
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves the roles associated with a specific username. It takes the username as input (in the format /user/roles/:username), performs a GET operation to access user role information, and returns the roles in the response. The response includes details like role ID, role name, rank, department ID, payment amount, and department name for the requested user."
    },
    "/user/unactive_roles/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_unactive_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "0",
                        "rolename": "somewhere",
                        "rang": "0",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "roleid": "1",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "0",
                        "payment": "0",
                        "departmentname": "nowhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about inactive roles associated with a specific username. It returns details such as role ID, name, rank, department ID, payment level, and department name for each inactive role linked to that user."
    },
    "/user/add_role": {
        "request": {
            "function": "add_user_role",
            "method": "post",
            "body_fields": {
                "username": "String",
                "role_id": "Int",
                "role": "String",
                "department": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method `add_user_role` adds a specific role to a user. It takes inputs like the user's username, the ID of the role, the name of the role, and optionally, the department they belong to, using a 'Bearer' token for authentication."
    },
    "/user/delete_role": {
        "request": {
            "function": "delete_user_role",
            "method": "delete"
        },
        "response": {},
        "explanation": "The method `delete_user_role` performs a DELETE operation to remove or delete a role associated with a user. It likely interacts with a system's backend where roles and users are managed to perform this action."
    },
    "/user/create_role": {
        "request": {
            "function": "create_role",
            "method": "post",
            "body_fields": {
                "payment": "Int",
                "role": "String",
                "department": "Int",
                "rang": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method creates a new role using provided data such as payment amount, role name, department ID, and rank. It requires authentication via a 'Bearer' token in the header."
    },
    "/user/department/roles/:department([0-9]+)": {
        "request": {
            "function": "department_roles",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "roleid": "11",
                        "rolename": "starter",
                        "rang": "0",
                        "departmentid": "1",
                        "payment": "-10"
                    },
                    {
                        "roleid": "9",
                        "rolename": "anyone",
                        "rang": "1",
                        "departmentid": "1",
                        "payment": "100"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves role information for a specified department. Specifically, it fetches details like role ID, name, rank, associated department's ID, and payment related to those roles from the system. The response includes these details in JSON format along with standard HTTP headers."
    },
    "/user/department/name/:department([0-9]+)": {
        "request": {
            "function": "department_name",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "department": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method being described is a GET request function designed to retrieve department names. When invoked with an ID for a specific department (represented by \":department([0-9]+)\"), it returns details about that department in the form of a JSON response. The result includes the department's name, which here is 'somewhere'. This operation doesn't detail how the retrieval occurs but specifies what kind of request and expected outcome this function provides."
    },
    "/user/set_department": {
        "request": {
            "function": "set_users_department",
            "method": "put",
            "body_fields": {
                "department": "String",
                "username": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows changing the department of a user by using their username and specifying the new department. It requires an API call with a \"put\" method, including a 'Bearer' token in the headers for authentication. The body needs to include the 'department' and 'username' fields for processing."
    },
    "/user/department/roles": {
        "request": {
            "function": "all_departments",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "departmentid": "0",
                        "departmentname": "nowhere"
                    },
                    {
                        "departmentid": "1",
                        "departmentname": "somewhere"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about all departments using a GET request. It returns the department IDs and names in a JSON format, along with standard HTTP response headers."
    },
    "/user/department/start/:department(.*)": {
        "request": {
            "function": "starter_role",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "text": "11",
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about a specific department's role. It uses GET request to call function 'starter_role' with department name as parameter, returns 200 status code indicating success along with server date, content type, length and connection headers. The text returned is '11'."
    },
    "/user/all_avatars": {
        "request": {
            "function": "all_avatars",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/avatars/example_1.png",
                    "images/avatars/example_5.png"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The `all_avatars` method retrieves a list of all available avatars in the system. It sends a GET request to access this information. The response includes the status code (200 indicating success) and the list of avatar image paths, like 'images/avatars/example_1.png' and 'images/avatars/example_5.png'."
    },
    "/user/set_avatar": {
        "request": {
            "method": "put",
            "body_fields": {
                "avatar": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows a user to change their avatar by sending a PUT request with an avatar image as the body field and including a \"Bearer\" token in the headers."
    },
    "/achivements/user/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "5",
                        "username": "scv-7",
                        "achivement_id": "2",
                        "datetime": "2025-01-16 00:32:04.305811",
                        "stage": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 2",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 2 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "1",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves achievement information for a user specified by their username. It returns details about a specific achievement including ID, name, description, associated stage, picture URL, tree category, level, stages, department ID and its category name. The method uses GET request to fetch this data."
    },
    "/achivements/user/full/:username([a-zA-Z0-9\\-]+)": {
        "request": {
            "function": "full_user_achivemets",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "32",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 32",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 32 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "24",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 24",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 24 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves full achievement details for a user specified by their username. It makes a GET request to fetch information about all achievements associated with that user, including IDs, names, descriptions, stages required, pictures, categories, levels, and other related data. The response includes the retrieved achievement details in JSON format along with standard HTTP headers."
    },
    "/achivements/add": {
        "request": {
            "function": "add_achivement",
            "method": "post",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method adds an achievement for a user by taking their username and achievement ID as inputs through a POST request. The request needs to include a 'Bearer' token in its headers."
    },
    "/achivements/delete": {
        "request": {
            "function": "delete_achivement",
            "method": "delete",
            "body_fields": {
                "username": "String",
                "achivement_id": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method `delete_achievement` performs a DELETE operation to remove an achievement. It requires two inputs: `username`, identified as a string, and `achivement_id`, defined as an integer. The operation utilizes a 'Bearer' type header for authentication purposes."
    },
    "/achivements/tree/:tree_id([0-9]+)": {
        "request": {
            "function": "achivements_tree",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "4",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 4",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 4 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "achivement_id": "18",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 18",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 18 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves achievement tree information for a specific tree by its ID. It sends a GET request to access this data, receives a response with details about achievements like their IDs, pictures, names, descriptions, and categories, among other things, and returns this structured data along with standard server HTTP headers."
    },
    "/achivements/info/:achivement_id([0-9]+)": {
        "request": {
            "function": "achivement_info",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "achivement_id": "1",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 1",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 1 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "0",
                        "stages": "1",
                        "category": "1",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about a specific achievement (based on its ID) from a system. It makes a GET request to retrieve this data which includes details like the achievement's ID, picture, name, description, associated tree ID, level, stages, category, and department ID. The response typically comes with standard HTTP headers providing server information and content details."
    },
    "/achivements/create": {
        "request": {
            "function": "create_achivement",
            "method": "post",
            "body_fields": {
                "name": "String",
                "tree_id": "Int",
                "level": "Int",
                "pic": "String",
                "description": "String",
                "stages": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method creates a new achievement. It accepts details like name, tree ID, level, picture, description, and stages as inputs via a POST request. The 'Bearer' authentication header is also required."
    },
    "/achivements/pictures": {
        "request": {
            "function": "achivement_pictures",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    "images/achivements/example_1.png",
                    "images/achivements/example_1.jpg"
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "The method retrieves a list of achievement picture file paths."
    },
    "/achivements/no_dep": {
        "request": {
            "function": "no_department_achivements",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "20",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 20",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 20 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    },
                    {
                        "id": "",
                        "username": "",
                        "achivement_id": "12",
                        "datetime": "",
                        "stage": "",
                        "achivement_pic": "images/achivements/example_1.png",
                        "achivement_name": "\u0430\u0447\u0438\u0432\u043a\u0430 \u043d\u043e\u043c\u0435\u0440 12",
                        "achivement_decsription": "\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0430\u0447\u0438\u0432\u043a\u0443 12 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e \u043d\u0430\u0434\u043e \u0447\u0442\u043e-\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c",
                        "achivement_tree": "1",
                        "level": "3",
                        "stages": "10",
                        "category": "2",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442",
                        "departmentid": "-1"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about achievements that do not belong to any department. It accepts a request with a 'Bearer' token in the header and returns a JSON response containing details of multiple unnamed achievements (with IDs 20 and 12). The response includes achievement names, descriptions, categories, trees, levels, stages, pictures, and timestamps. There's also information about the default department ID being set to '-1', suggesting these are global or shared achievements not tied to specific departments."
    },
    "/achivements/by_user": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves achievements associated with a specific user. It uses a GET request with a \"Bearer\" header field for authentication to fetch the desired data."
    },
    "/media/get/:filename(.*)": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet represents a route configuration in an application. The path `/media/get/:filename(.*)` indicates that this specific URL endpoint should respond to HTTP GET requests with a certain structure for its request header and body.\n\nThe `:filename` part of the path signifies a parameter that can be used inside your application logic, where you might need to retrieve or process files based on the filename provided in the URL.\n\nThe `request` object within the dictionary describes this GET request:\n\n- **Method**: The request is being made using the HTTP GET method. This means retrieving data from the server at the specified endpoint.\n- **Header Fields**: It requires a 'Bearer' token to be included in the headers of the HTTP request. Typically, such tokens are used for authentication purposes.\n\nThe `response` part indicates what should happen after receiving the request or how it should respond:\n\n- Since there's no further description under 'response', it implies that you need to define the appropriate response data, status code, and any other details inside your application based on this route configuration.\n\nIn essence, when someone attempts to access `http://yourapp.com/media/get/somefilename`, they are making a GET request expecting the server to retrieve or deliver some file (`somefilename`) using an authentication token (Bearer token). The specifics of how that file is handled, what data is returned, etc., depend on your application's implementation."
    },
    "/transactions/prepare": {
        "request": {
            "function": "prepare_transaction",
            "method": "post",
            "body_fields": {
                "receiver": "String",
                "amount": "Int"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows you to prepare a transaction by sending a POST request. You need to provide two pieces of information: \n\n1. `receiver`: The recipient's identifier as a string.\n2. `amount`: The amount being transferred, specified as an integer.\n\nThe request should include an authentication header with the keyword \"Bearer\" to authenticate the user or client making the transaction preparation request."
    },
    "/transactions/send": {
        "request": {
            "function": "transfer",
            "method": "post",
            "body_fields": {
                "tr_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is used for transferring funds. It uses a POST request with a \"transfer\" function, requiring an ID (tr_id) as a string in the body of the request. The request needs to be authenticated using a 'Bearer' token. There's no explicit response provided, so it likely returns a status indicating success or failure of the transfer operation."
    },
    "/transactions/balance": {
        "request": {
            "function": "get_balance",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code represents a method in an API setup where '/transactions/balance' acts as the endpoint URL. When using the HTTP GET method with 'Bearer' authentication headers, the function 'get_balance' is called by this endpoint. The purpose of this method is to retrieve or check the current balance associated with a specific account or user session that's authenticated via the 'Bearer' token."
    },
    "/transactions/my": {
        "request": {
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code snippet describes a GET request for a specific endpoint '/transactions/my'. The request includes an authorization header named 'Bearer', which likely contains an access token. The response details are not provided, implying that no data is expected to be returned from this request. In essence, the method is requesting transaction-related information associated with a particular user or account identified by '/transactions/my'."
    },
    "/social/authors": {
        "request": {
            "function": "get_authors_list",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves a list of authors. It uses GET request to fetch this information from the '/social/authors' endpoint. The response indicates successful operation (status code 200) and returns an empty result list, suggesting there are no author records at this moment. The response includes standard HTTP headers for serving the data."
    },
    "/social/news:search(.*)": {
        "request": {
            "function": "get_news",
            "method": "get",
            "params": [
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method is searching for news using a GET request. It requires specifying a starting point ('start'), number of items to retrieve ('size'), and includes an authorization token in the header fields named 'Bearer'. The response will contain the fetched news data, but details on how it retrieves or formats this information are not provided here."
    },
    "/social/comments:search(.*)": {
        "request": {
            "function": "get_comments",
            "method": "get",
            "params": [
                "post_id",
                "start",
                "size"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves comments for a specific post from a social platform. It uses an HTTP GET request with parameters like post ID, starting point of comments to fetch, number of comments to return, and a Bearer token for authentication. The response provides the comments data related to the given post id."
    },
    "/social/media/pics/:post_id(.*)": {
        "request": {
            "function": "get_post_media",
            "method": "get",
            "header_fields": [
                "pics"
            ]
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": []
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves media (like images) associated with a specific post by its ID from a social media platform. It uses an HTTP GET request to access this information, specifically targeting URLs that include the '/social/media/pics/:post_id' path pattern. The response will indicate success (HTTP status code 200) and provide any relevant server headers along with the body containing the list of media associated with the requested post ID."
    },
    "/social/new/:post_id(.*)": {
        "request": {
            "function": "get_post",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves a specific post using its ID. It requires an authorization header for GET request to access the post with the given ID.\n\nThe key points are:\n- Method: Retrieves details of a particular post.\n- Request:\n  - Function: 'get_post'\n  - HTTP method: 'GET'\n  - Header field: Requires 'Bearer' token for authentication\n- Response:\n  - No specific response format mentioned, but it implies the server will return the requested post data"
    },
    "/social/posts": {
        "request": {
            "function": "get_all_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method retrieves all posts using a GET request. It requires a \"Bearer\" token in the header for authentication. The response details are not provided."
    },
    "/social/titles": {
        "request": {
            "function": "get_all_titles",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method described here retrieves all titles using a GET request and authentication provided via 'Bearer' token. It is designed to interact with an API endpoint for title-related data acquisition."
    },
    "/social/saved": {
        "request": {
            "function": "get_saved_posts",
            "method": "get",
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This code represents a request to retrieve saved posts. The user sends an HTTP GET request to '/social/saved', including their authentication token in a 'Bearer' header field. The response will contain the saved posts data."
    },
    "/social/save": {
        "request": {
            "function": "delete_saved_post",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method deletes a saved post using its ID. It requires an authorization token (Bearer) to perform the action."
    },
    "/social/search:search(.*)": {
        "request": {
            "function": "search_by_title",
            "method": "get",
            "params": [
                "title"
            ],
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method searches for something based on a title using a GET request. It includes a \"Bearer\" token in the header fields for authentication and utilizes a function called 'search_by_title'. The actual search details like what exactly is being searched are not specified here, just that it's related to searching by title."
    },
    "/social/like": {
        "request": {
            "function": "delete_like",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "The method being described here appears to involve deleting a \"like\" on a post using a DELETE request. The function `delete_like` is called with an ID of the post as its parameter and utilizes an API token (Bearer) in the headers for authentication. Essentially, this method removes a like from a specified post."
    },
    "/social/dislike": {
        "request": {
            "function": "delete_dislike",
            "method": "delete",
            "body_fields": {
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method is designed to remove a dislike on a specific post. It requires an API key (Bearer token) for authentication and the ID of the post as its input parameters. Its main function is to delete the dislike related to that post."
    },
    "/social/comments": {
        "request": {
            "function": "add_comment",
            "method": "post",
            "body_fields": {
                "comment": "String",
                "post_id": "String"
            },
            "header_fields": [
                "Bearer"
            ]
        },
        "response": {},
        "explanation": "This method allows users to post comments on a specific post by using a POST request. Users need to provide two pieces of information: the comment they want to add and the ID of the post they are commenting on. The request also needs to include an authorization token in the header, typically in the form 'Bearer <token>'."
    },
    "/social/categories": {
        "request": {
            "function": "get_post_categories",
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442"
                    },
                    {
                        "category": "2",
                        "category_name": "\u0434\u0435\u0444\u043e\u043b\u0442"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This code describes a function that retrieves categories from social media posts. When called via GET request, it returns data about certain categories, their IDs ('category') and names ('category_name'). The response status code 200 indicates success. It also mentions the method of operation is not detailed here but could include server information like date, content type, length, and connection details for network communication."
    },
    "/social/bycat/:category([0-9\\-]+)": {
        "request": {
            "method": "get"
        },
        "response": {
            "status_code": 200,
            "body": {
                "result": [
                    {
                        "post_id": "2",
                        "post_path": "posts/example_post.md",
                        "is_secret": "t",
                        "likes": "0",
                        "title": "secret page",
                        "author": "scv-7",
                        "text": "\u044d\u0442\u043e  \u043d\u0435 \u0432\u0430\u0436\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c",
                        "dislikes": "0",
                        "parent_id": "",
                        "date": "2025-05-02 21:11:31.404448",
                        "saved_count": "0",
                        "category": "1",
                        "category_name": "\u043d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442"
                    }
                ]
            },
            "headers": [
                "Server",
                "Date",
                "Content-Type",
                "Content-Length",
                "Connection"
            ]
        },
        "explanation": "This method retrieves information about a specific category on a social platform. It accepts GET requests and returns details of posts belonging to that category in JSON format, including post ID, path, title, author, text content, date posted, saved count, etc., along with HTTP headers like status code, server name, date, content type, length, and connection settings."
    }
}